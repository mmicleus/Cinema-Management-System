@page "/Admin/Branches"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "admin")]

@inject IBranchesService branchesService
@inject IJSRuntime Javascript
@inject NavigationManager navManager

<div class="white-background-container" style="background-color:#fff;min-height:100vh;">

	@* <Navbar></Navbar> *@

	<div class="container-fluid">
		<div class="row flex-nowrap">
			<div class="col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-dark">
				<SideMenu></SideMenu>
			</div>
			<div class="col py-3">
				
				@if (Message.Text != string.Empty)
				{
					if (Message.Category == MessageCategory.Error)
					{
						<div class="alert alert-danger" role="alert">
							@Message.Text
						</div>
					}
					else if (Message.Category == MessageCategory.Warning)
					{
						<div class="alert alert-warning" role="alert">
							@Message.Text
						</div>
					}
					else if (Message.Category == MessageCategory.Success)
					{
						<div class="alert alert-success" role="alert">
							@Message.Text
						</div>
					}
				}


				<div class="container pt-5">



					@if (ShowSpinner)
					{
						<div class="d-flex justify-content-center">
							<h5>Loading Branches</h5>
							@* <span class="sr-only">Loading...</span> *@
						</div>
						<div class="d-flex justify-content-center">
							<div class="spinner-border" role="status">
								@* <span class="sr-only">Loading...</span> *@
							</div>
						</div>
					}
					else if (branchesService.Branches == null || branchesService.Branches.Count() == 0)
					{
						<div class="d-flex justify-content-center">
							<h5>No Branches to display</h5>
						</div>
					}
					else
					{
						<h3 class="mb-5">Branches</h3>
						<div class="container">
							<div class="row">

								@foreach (var branch in branchesService.Branches)
								{
									<div class="col-12">

										<div class="card mb-4" style="background-color:lightgray; box-shadow:rgba(0, 0, 0, 0.35) 0px 5px 15px;">

											@* <img src=@movie.BackdropPath class="card-img-top" alt="..."> *@
											<div class="card-body d-flex flex-column justify-content-between">


												<div class="d-flex justify-content-end">
													<button @onclick="(()=>{EditBranch(branch.Id);})" class="me-1">
														<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
															<path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
														</svg>
													</button>
													<button @onclick="(()=>{DeleteBranch(branch.Id);})" class="me-1">
														<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
															<path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
														</svg>
													</button>

												</div>




												<div class="container">
													<div class="row">
														<div class="col-6">

															<div>
																<h2 class="card-title fw-bold mb-4">@branch.Name</h2>
																<img src=@branch.ImageUrl class="card-img mb-3" alt="..." style="width:300px;height=300px">

																<p><span><b>Address:</b> </span>@branch.Address<span></span></p>
																<p><span><b>Lat:</b> </span><span>@branch.Coords.Lat</span></p>
																<p><span><b>Lon:</b> </span><span>@branch.Coords.Lng</span></p>
																<p><span><b>Nr of venues:</b></span><span>@branch.Venues.Count()</span></p>
															</div>
															@* <div>
													<a type="button"
													@onclick="(() => {})"
													class="btn btn-primary">Show Venues</a>
													</div> *@


														</div>
														<div class="col-6 d-flex flex-column ps-5 pe-5 venue-container">

															<h3 class="mb-2"><b>Venues</b></h3>

															<div style="max-height:400px;overflow-y:auto;" class="p-3">
																@foreach (var v in branch.Venues)
																{
																	<div class="card mb-3 venue-card" style="background-color:lightgray;box-shadow:rgba(0, 0, 0, 0.35) 0px 5px 15px;">
																		<div class="body p-3">
																			<h3 class="card-title">@v.Name</h3>
																			<h6 class="card-subtitle mb-2 text-muted">@v.Capacity Seats</h6>
																		</div>
																	</div>
																}
															</div>

														</div>
													</div>
												</div>

											</div>


										</div>
									</div>
								}


							</div>
						</div>
					}


				</div>

			</div>
		</div>
	</div>





</div>






@code {

	public Message Message { get; set; } = new Message();

	public bool ShowSpinner { get; set; } = false;


	public void EditBranch(int branchId)
	{
		navManager.NavigateTo($"Admin/Branch/{branchId}");
	}


	public async Task DeleteBranch(int branchId)
	{
		bool success = await branchesService.DeleteBranch(branchId);

		if (success)
		{
			ShowMessage(MessageCategory.Success,"Branch Deleted Successfully",4);
			await branchesService.GetAllBranches();
		}
		else
		{
			ShowMessage(MessageCategory.Error, "Something Went Wrong", 4);
		}
	}



	protected override async Task OnInitializedAsync()
	{
		ShowSpinner = true;
		await branchesService.GetAllBranches();
		ShowSpinner = false;
	}

	public async Task ShowMessage(MessageCategory category, string message, int seconds)
	{
		Message.Category = category;
		Message.Text = message;
		StateHasChanged();

		await Task.Delay(seconds * 1000);

		Message.Text = string.Empty;
		StateHasChanged();
	}


}
