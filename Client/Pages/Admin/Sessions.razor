
@page "/Admin/Sessions"
@inject ISessionsService SessionsService



@if (Message.Text != string.Empty)
{
	if (Message.Category == MessageCategory.Error)
	{
		<div class="alert alert-danger" role="alert">
			@Message.Text
		</div>
	}
	else if (Message.Category == MessageCategory.Warning)
	{
		<div class="alert alert-warning" role="alert">
			@Message.Text
		</div>
	}
	else if (Message.Category == MessageCategory.Success)
	{
		<div class="alert alert-success" role="alert">
			@Message.Text
		</div>
	}
}


<h3>Sessions</h3>

@if(SessionsService.Sessions == null || SessionsService.Sessions.Count() == 0)
{
	<h5>No Sessions to display</h5>
}
else
{
	<div class="container">
		<div class="row">
			@foreach (SessionDTO session in SessionsService.Sessions)
			{
				<div class="col-12 mb-5">
					<div class="card pt-3 pb-3">

						<div class="d-flex justify-content-end">
							<button @onclick="(()=>{})" class="me-1">
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
									<path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z" />
								</svg>
							</button>
							<button @onclick="(()=>{DeleteSession(session.Id);})" class="me-1">
								<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
									<path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
								</svg>
							</button>

						</div>




						<div class="container">
							<div class="row">
								<div class="col-6">


									<h3><b>@session.Movie.Title</b></h3>

									<img class="card-img mb-3 mt-2" src="@session.Movie.BackdropPath" />

									<h5 class="card-title"><b>@session.Venue.Branch.Name - @session.Venue.Name </b></h5>

									<h6 class="card-subtitle mb-2 text-muted">@session.StartTime.ToString("MM/dd/yyyy")</h6>
									<h6 class="card-subtitle mb-2 text-muted">
										@session.StartTime.ToString("hh:mm tt") - @session.EndTime.ToString("hh:mm tt")
									</h6>
								</div>
								<div class="col-6">
									<h4><b>Bookings</b></h4>

									@if (session.Bookings == null || session.Bookings.Count() == 0)
									{
										<p>No Bookings to display</p>
									}
									else
									{
										<div class="container" style="max-height:500px;overflow:auto;">
											<div class="row">

												@foreach (BookingDTO bk in session.Bookings)
												{
													<div class="col-12 mb-3">
														<div class="card">
															<div class="card-body">
																@if (bk.User != null)
																{
																	<h5><b>Email:</b> @bk.User.Email</h5>
																	<h5><b>Address:</b> @bk.User.Address</h5>


																}
																else if (bk.Customer != null)
																{
																	<h5><b>Full Name:</b> @bk.Customer.FirstName @bk.Customer.LastName</h5>
																	<h5><b>Email:</b> @bk.Customer.Email</h5>
																}


																<h5 class="mb-4"><b>Amount Paid:</b> $@bk.TotalAmount</h5>

																@* <h6 class="card-subtitle mb-2 text-muted mb-3">
												<b>Amount Paid:</b> $@bk.TotalAmount
												</h6> *@

																<h4 class="mb-3"><b>Booked Seats</b></h4>

																@if (bk.Seats == null || bk.Seats.Count() == 0)
																{
																	<p>No Seats to display</p>
																}
																else
																{
																	<div class="d-flex" style="flex-wrap:wrap;">
																		@foreach (SeatDTO seat in bk.Seats)
																		{
																			<span class="p-2 me-2 mb-2" style="border:1px solid gray;">
																				@seat.Label
																			</span>
																		}

																	</div>
																}




																@* <div class="container">
												<div class="row">
												@foreach(SeatDTO seat in bk.Seats)
												{
												<div class="col-4">
												@seat.Label
												</div>
												}

												</div>

												</div> *@


															</div>

														</div>
													</div>
												}

											</div>
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		</div>

	</div>
}









@code {

	public Message Message { get; set; } = new Message();


	protected override async Task OnInitializedAsync()
	{
		await SessionsService.GetSessions();
	}

	// public async Task EditSession(int sessionId)
	// {
	// 	bool success = await SessionsService.DeleteBranch(branchId);

	// 	if (success)
	// 	{
	// 		ShowMessage(MessageCategory.Success, "Branch Deleted Successfully", 4);
	// 		await branchesService.GetAllBranches();
	// 	}
	// 	else
	// 	{
	// 		ShowMessage(MessageCategory.Error, "Something Went Wrong", 4);
	// 	}
	// }


	public async void DeleteSession(int sessionId)
	{
		bool success = await SessionsService.DeleteSession(sessionId);

		if (success)
		{
			ShowMessage(MessageCategory.Success, "Session Deleted Successfully", 4);
			await SessionsService.GetSessions();
		}
		else
		{
			ShowMessage(MessageCategory.Error, "Something Went Wrong", 4);
		}
	}

	public async Task ShowMessage(MessageCategory category, string message, int seconds)
	{
		Message.Category = category;
		Message.Text = message;
		StateHasChanged();

		await Task.Delay(seconds * 1000);

		Message.Text = string.Empty;
		StateHasChanged();
	}

}
