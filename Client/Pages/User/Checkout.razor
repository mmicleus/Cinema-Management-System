@page "/Checkout/{SetHashCode:int}"
@using BlazorCinemaMS.Client.Services.EmailService;
@using System.Security.Claims;
@using BlazorCinemaMS.Client.Services.UserService;
@using System.Text.RegularExpressions;
@using Blazored.LocalStorage;
@inject StateContainer stateContainer;
@inject ISessionsService SessionsService;
@inject IEmailService emailService;
@inject StateContainer stateContainer
@inject NavigationManager navManager
@inject AuthenticationStateProvider stateProvider
@inject IUserService userService
@inject ILocalStorageService LocalStorage


@if (Message.Text != string.Empty)
{
    if (Message.Category == MessageCategory.Error)
    {
        <div class="alert alert-danger" role="alert">
            @Message.Text
        </div>
    }
    else if (Message.Category == MessageCategory.Warning)
    {
        <div class="alert alert-warning" role="alert">
            @Message.Text
        </div>
    }
    else if (Message.Category == MessageCategory.Success)
    {
        <div class="alert alert-success" role="alert">
            @Message.Text
        </div>
    }
}


<!-- Start of navbar -->
<Navbar></Navbar>

<!-- end of navbar -->


<div class="container main-container">
    <div class="row">
        <!-- first column -->
        <div class="col-12 col-md-6 first-column">

            <!-- Movie container -->

            <div class="container movie-container">
                <div class="row">
                    <div class="col-12 p-0">
                        <img src=@(Session != null ? Session.Movie.BackdropPath : "") class="movie-img" alt="">
                    </div>
                    <div class="col-12">
                        <div class="booking-details mt-4">
                            <h3 class="hero-booking">NOW BOOKING</h3>
                            <h3 class="hero-name">@(Session != null ? Session.Movie.Title : "-")</h3>
                            <p class="movie-time">@(Session != null ? (Session.StartTime.ToString("MMMM dd")+", "+ @Session.StartTime.ToString("h:mm tt") + " - " + @Session.EndTime.ToString("h:mm tt")) : "-")</p>
                        </div>


                        @if(SeatsWithClass != null)
                        {
                            @foreach (SeatsWithClassVM group in SeatsWithClass)
                            {
                                @if (group.Seats != null && group.Seats.Count() > 0)
                                {
                                    <div class="seats">
                                        <hr>
                                        <div class="d-flex justify-content-between">
                                            <span><span class="nr-of-seats">@group.Seats.Count()</span> <span>@group.SeatClass.ToString()</span> Seats</span>
                                            <div class="seats-container d-flex flex-wrap">

                                                @foreach (SeatDTO seat in group.Seats)
                                                {
                                                    <span>@seat.Label</span>
                                                }

                                            </div>
                                        </div>
                                        <hr>
                                    </div>
                                }
                            }
                        }


                      
                        <div>
                            <div class="d-flex justify-content-between total" style="color:#fff;"><span>Total</span><span>€<span class="total-euros">@BookingCost</span></span></div>
                            <hr>
                        </div>

                    </div>
                </div>
            </div>

        </div>
        <!-- second column -->
        <div class="col-12 col-md-6 second-column">

            <!-- Form Container -->
            <div class="container form-container py-5">
                <h1 class="mb-4">Cinema Ticket Checkout</h1>

                @if(authState!=null && authState.User.Identity.IsAuthenticated)
                {
                    @* ---------------------- Authenticated Form -------------------- *@

                    <EditForm Model="User" OnValidSubmit="HandleValidFormSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>



                            <p>@userService.GetUser().Username</p>


                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>

                            <p>@userService.GetUser().Email</p>


                        </div>

                        @if(userService.GetUser().Phone != null)
                        {
                            <div class="mb-3">
                                <label for="phone" class="form-label">Phone</label>

                                <p>@userService.GetUser().Phone</p>

                            </div>
                        }

                        @if(userService.GetUser().Address != null)
                        {
                            <div class="mb-3">
                                <label for="address" class="form-label">Address</label>

                                <p>@userService.GetUser().Address</p>

                            </div>
                        }

                        
                        <div class="mb-3">
                            <label for="nameOnCard" class="form-label">Name On Card</label>
                            <InputText id="nameOnCard" @bind-Value="User.NameOnCard" class="form-control" maxlength="50" placeholder="John Doe"></InputText>
                            <ValidationMessage For="@(() => User.NameOnCard)" />
                        </div>
                        <div class="mb-3">
                            <label for="creditcard" class="form-label">Credit Card Number</label>
                            <InputText id="creditcard" @bind-Value="User.CardNumber" class="form-control" maxlength="19" placeholder="1111 1111 1111 1111"></InputText>
                            <ValidationMessage For="@(() => User.CardNumber)" />
                        </div>

                        <div class="mb-3">
                            <label for="expmonth" class="form-label">Exp Month</label>
                            <InputText id="expmonth" @bind-Value="User.ExpMonth" class="form-control" maxlength="2" placeholder="01"></InputText>
                            <ValidationMessage For="@(() => User.ExpMonth)" />
                        </div>

                        <div class="mb-3">
                            <label for="expyear" class="form-label">Exp Year</label>
                            <InputText id="expyear" @bind-Value="User.ExpYear" class="form-control" maxlength="2" placeholder="24"></InputText>
                            <ValidationMessage For="@(() => User.ExpYear)" />
                        </div>

                        <div class="mb-3">
                            <label for="cvv" class="form-label">CVV</label>
                            <InputText id="cvv" @bind-Value="User.CVV" class="form-control" maxlength="3" placeholder="123"></InputText>
                            <ValidationMessage For="@(() => User.CVV)" />
                        </div>
                        <ValidationSummary/>
                        <br>
                        <button type="submit" class="btn btn-primary">
                            @if (!ShowSpinner)
                            {
                                <span>Submit</span>
                            }
                            else
                            {
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </button>

                    </EditForm>

                    @* ---------------------- End Of Authenticated Form -------------------- *@
                }
                else
                {
                    @* ---------------------- Non-Authenticated Form -------------------- *@

                    <EditForm Model="Customer" OnValidSubmit="HandleValidFormSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="firstname" class="form-label">First Name</label>

                            <InputText id="name" @bind-Value="Customer.FirstName" class="form-control" maxlength="40" placeholder="John"></InputText>
                            <ValidationMessage For="@(() => Customer.FirstName)" />


                        </div>

                        <div class="mb-3">
                            <label for="lastname" class="form-label">Last Name</label>

                            <InputText id="lastname" @bind-Value="Customer.LastName" class="form-control" max-length="40" placeholder="Doe"></InputText>
                            <ValidationMessage For="@(() => Customer.LastName)" />

                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>

                            <InputText id="email" @bind-Value="Customer.Email" class="form-control" placeholder="example@gmail.com"></InputText>
                            <ValidationMessage For="@(() => Customer.Email)" />


                        </div>

                        <div class="mb-3">
                            <label for="phone" class="form-label">Phone</label>

                            <InputText id="phone" @bind-Value="Customer.Phone" class="form-control" placeholder="+353 891234567"></InputText>
                            <ValidationMessage For="@(() => Customer.Phone)" />

                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>

                            <InputText id="address" @bind-Value="Customer.Address" class="form-control" maxlength="40" placeholder="One Park Place Hatch St, 2, Dublin, Ireland"></InputText>
                            <ValidationMessage For="@(() => Customer.Address)" />


                        </div>
                        <div class="mb-3">
                            <label for="nameOnCard" class="form-label">Name On Card</label>
                            <InputText id="nameOnCard" @bind-Value="Customer.NameOnCard" class="form-control" maxlength="50" placeholder="John Doe"></InputText>
                            <ValidationMessage For="@(() => Customer.NameOnCard)" />
                        </div>
                        <div class="mb-3">
                            <label for="creditcard" class="form-label">Credit Card Number</label>
                            <InputText id="creditcard" @bind-Value="Customer.CardNumber" class="form-control" maxlength="19" placeholder="1111 1111 1111 1111"></InputText>
                            <ValidationMessage For="@(() => Customer.CardNumber)" />
                        </div>

                        <div class="mb-3">
                            <label for="expmonth" class="form-label">Exp Month</label>
                            <InputText id="expmonth" @bind-Value="Customer.ExpMonth" class="form-control" maxlength="2" placeholder="01"></InputText>
                            <ValidationMessage For="@(() => Customer.ExpMonth)" />
                        </div>

                        <div class="mb-3">
                            <label for="expyear" class="form-label">Exp Year</label>
                            <InputText id="expyear" @bind-Value="Customer.ExpYear" class="form-control" maxlength="2" placeholder="24"></InputText>
                            <ValidationMessage For="@(() => Customer.ExpYear)" />
                        </div>

                        <div class="mb-3">
                            <label for="cvv" class="form-label">CVV</label>
                            <InputText id="cvv" @bind-Value="Customer.CVV" class="form-control" maxlength="3" placeholder="123"></InputText>
                            <ValidationMessage For="@(() => Customer.CVV)" />
                        </div>
                        <br>
                        <ValidationSummary />
                        <button type="submit" class="btn btn-primary">
                            @if (!ShowSpinner)
                            {
                                <span>Submit</span>
                            }
                            else
                            {
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </button>

                    </EditForm>

                    @* ---------------------- End Of Non-Authenticated Form -------------------- *@
                }

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int SetHashCode { get; set; }
    public SessionDTO Session { get; set; }
    public List<SeatDTO> Seats { get; set; }
    public double BookingCost { get; set; }
    public List<SeatsWithClassVM> SeatsWithClass { get; set; }

    public Message Message { get; set; } = new Message();


    public bool ShowSpinner { get; set; } = false;

    public CustomerVM Customer { get; set; } = new CustomerVM() {  };

    public UserVM User { get; set; } = new UserVM() { };

    public AuthenticationState authState;



    protected override async Task OnInitializedAsync()
    {
        authState = await stateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
            PopulateForm(authState.User);
        }


        //ShowQuickbookAfterSeconds(4);
        var data = (SessionAndSeatsDTO)stateContainer.ObjectTunnel[SetHashCode];
        Session = data.Session;
        Seats = data.Seats.ToList();

        BookingCost = GetBookingCost();
        SeatsWithClass = GetSeatsByClass();
    }

    public async Task ShowMessage(MessageCategory category, string message, int seconds)
    {
        Message.Category = category;
        Message.Text = message;
        StateHasChanged();

        await Task.Delay(seconds * 1000);

        Message.Text = string.Empty;
        StateHasChanged();
    }

    public string GetEmailClaim(ClaimsPrincipal user)
    {
        return user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value;
    }

    public string GetAddressClaim(ClaimsPrincipal user)
    {
        return user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.StreetAddress).Value;
    }

    public string GetPhoneNumberClaim(ClaimsPrincipal user)
    {
        return user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.MobilePhone).Value;
    }

    public string GetUsernameClaim(ClaimsPrincipal user)
    {
        return user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name).Value;
    }


    public void PopulateForm(ClaimsPrincipal user)
    {
        User.Email = GetEmailClaim(user);
        User.Username = GetUsernameClaim(user);
        User.Address = GetAddressClaim(user);
        User.Phone = GetPhoneNumberClaim(user);

        if(userService.GetUser() != null)
        {
            User.NameOnCard = string.IsNullOrEmpty(userService.GetUser().NameOnCard) ? null : userService.GetUser().NameOnCard;
            User.CardNumber = string.IsNullOrEmpty(userService.GetUser().CreditCardNumber) ? null : userService.GetUser().CreditCardNumber;
            User.ExpYear = string.IsNullOrEmpty(userService.GetUser().ExpYear) ? null : userService.GetUser().ExpYear;
            User.ExpMonth = string.IsNullOrEmpty(userService.GetUser().ExpMonth) ? null : userService.GetUser().ExpMonth;
            User.CVV = string.IsNullOrEmpty(userService.GetUser().CVV) ? null : userService.GetUser().CVV;
        }
        else
        {
            User.NameOnCard = null;
            User.CardNumber = null;
            User.ExpYear = null;
            User.ExpMonth = null;
            User.CVV = null;
        }

        

    }



    public double GetSeatPrice(SeatDTO seat)
    {
        switch (seat.SeatClass)
        {
            case SeatClass.ECONOMY:
                return Session.Pricing.Economy;
                break;
            case SeatClass.STANDARD:
                return Session.Pricing.Standard;
                break;
            case SeatClass.PREMIUM:
                return Session.Pricing.Premium;
                break;
            default:
                return 0;
        }
    }


    public double GetBookingCost()
    {
        if (Seats == null) return 0;

        return Seats.Sum(s => GetSeatPrice(s));
    }

    // public AppUserDTO GetUserDTO()
    // {
    //     new AppUserDTO()
    //         {
    //             Address = GetAddressClaim(authState.User),
    //             Email = GetEmailClaim(authState.User)
    //         },
    // }


    // public bool ValidCardDetails()
    // {
    //     return User.CreditCardDetails.NameOnCard  

    // }


    public bool ValidCardDetails()
    {
        return User.NameOnCard != null &&
        User.CardNumber != null &&
        User.ExpYear != null &&
        User.ExpMonth != null &&
        User.CVV != null;
    }

    public bool ValidNameOnCard()
    {
        return User.NameOnCard != null && !string.IsNullOrEmpty(User.NameOnCard);
    }

    public bool ValidCardNumber()
    {
        string pattern = @"^\d{4} \d{4} \d{4} \d{4}$";
        Regex regex = new Regex(pattern);


        return regex.IsMatch(User.CardNumber);
    }

    public bool ValidCVV()
    {
        string pattern = @"^\d{3}$";
        Regex regex = new Regex(pattern);


        return regex.IsMatch(User.CVV);
    }

    public bool ValidExpYear()
    {
        string pattern = @"^\d{2}$";
        Regex regex = new Regex(pattern);


        return regex.IsMatch(User.ExpYear);
    }

    public bool ValidExpMonth()
    {
        string pattern = @"(^0[0-9]$)|(^1[0-2]$)";
        Regex regex = new Regex(pattern);


        return regex.IsMatch(User.ExpMonth);
    }






    public async Task HandleValidFormSubmit()
    {
        ShowSpinner = true;
        BookingDTO bookingDTO;


        if (authState.User.Identity.IsAuthenticated)
        {

            if (!ValidNameOnCard())
            {
                ShowMessage(MessageCategory.Error, "Name On Card Required", 4);

                ShowSpinner = false;

                return;
            }

            if (!ValidCardNumber())
            {
                ShowMessage(MessageCategory.Error, "Invalid Card Number", 4);

                ShowSpinner = false;

                return;
            }

            if (!ValidExpMonth())
            {
                ShowMessage(MessageCategory.Error, "Invalid Expiry Month", 4);

                ShowSpinner = false;

                return;
            }

            if (!ValidExpYear())
            {
                ShowMessage(MessageCategory.Error, "Invalid Expiry Year", 4);

                ShowSpinner = false;

                return;
            }


            if (!ValidCVV())
            {
                ShowMessage(MessageCategory.Error, "Invalid CVV", 4);

                ShowSpinner = false;

                return;
            }

        }



        if (authState.User.Identity.IsAuthenticated)
        {
            bookingDTO = new BookingDTO()
                {
                    TotalAmount = BookingCost,
                    User = new AppUserDTO() { 
                        Username = GetUsernameClaim(authState.User),
                        Address = GetAddressClaim(authState.User),
                        Email = GetEmailClaim(authState.User),
                        Phone = GetPhoneNumberClaim(authState.User),
                        NameOnCard = User.NameOnCard,
                        CreditCardNumber = User.CardNumber,
                        ExpMonth = User.ExpMonth,
                        ExpYear = User.ExpYear,
                        CVV = User.CVV
                    },
                    Seats = Seats,
                    SessionId = Session.Id,

                };
        }
        else
        {
            CustomerDTO customerDTO = GetCustomerDTOFromCustomerVM(Customer);
            bookingDTO = new BookingDTO()
                {
                    TotalAmount = BookingCost,
                    Customer = customerDTO,
                    Seats = Seats,
                    SessionId = Session.Id,

                };
        }


        bool success = await SessionsService.AddBooking(bookingDTO);

        await userService.UpdateUser();
        await LocalStorage.SetItemAsync("user", userService.GetUser());

        if (success)
        {
            

            SessionAndBookingDTO data = new SessionAndBookingDTO()
                {
                    Session = Session,
                    Booking = bookingDTO
                };


            emailService.SendConfirmationEmail(data);


            stateContainer.ObjectTunnel.Add(data.GetHashCode(), data);

            ShowSpinner = false;

            navManager.NavigateTo($"/confirmation/{data.GetHashCode()}");
        }
        else
        {
            ShowSpinner = false;
        }
    }


    public CustomerDTO GetCustomerDTOFromCustomerVM(CustomerVM customerVM)
    {
        return new CustomerDTO()
            {
                FirstName = customerVM.FirstName,
                LastName = customerVM.LastName,
                Email = customerVM.Email,
                Phone = customerVM.Phone,
                Address = customerVM.Address,
                NameOnCard = customerVM.NameOnCard,
                CardNumber = customerVM.CardNumber,
                ExpMonth = customerVM.ExpMonth,
                ExpYear = customerVM.ExpYear,
                CVV = customerVM.CVV
            };
    }


    public List<SeatsWithClassVM> GetSeatsByClass()
    {
        List<SeatsWithClassVM> seats = new List<SeatsWithClassVM>();
        List<SeatDTO> EconomySeats = Seats.Where(s => s.SeatClass == SeatClass.ECONOMY).ToList();
        List<SeatDTO> StandardSeats = Seats.Where(s => s.SeatClass == SeatClass.STANDARD).ToList();
        List<SeatDTO> PremiumSeats = Seats.Where(s => s.SeatClass == SeatClass.PREMIUM).ToList();

        seats.Add(new SeatsWithClassVM()
            {
                SeatClass = SeatClass.ECONOMY,
                Seats = EconomySeats
            });

        seats.Add(new SeatsWithClassVM()
            {
                SeatClass = SeatClass.STANDARD,
                Seats = StandardSeats
            });

        seats.Add(new SeatsWithClassVM()
            {
                SeatClass = SeatClass.PREMIUM,
                Seats = PremiumSeats
            });

        return seats;
    }

}
