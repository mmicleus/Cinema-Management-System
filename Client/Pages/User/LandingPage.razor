@page "/"
@inject IBranchesService branchesService
@inject IMoviesService moviesService
@inject IUtilityService utilityService
@inject NavigationManager navManager
@inject StateContainer stateContainer

<!-- Button trigger modal -->
@* <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
	Launch demo modal
</button> *@


<!-- --------------------------- Quick Book ----------------------------->

<div class=@(!ShowQuickBook ? "quickbook-container bg-info w-100" : "quickbook-container show bg-info w-100")>
		<div class="container-fluid">
			<div class="row">
				<div class="quickbook-title-container col-2 bg-warning d-flex justify-content-end py-2">
				<div><span class="quickbook-title">Quick <br> Book</span></div>
				</div>
				<div class="col-10 py-2 d-flex quickbook-col2" style="align-items:center;">
					<div class="container-fluid quick-book-controls">

						<div class="row">
							<div class="col-3">

								<div class="quick-book-control d-flex flex-column">
									<span class="quickbook-label">Branch</span>
									<div class="p-2 d-flex justify-content-between" style="border-bottom:1px solid lightgray;cursor:pointer;" data-bs-toggle="modal" data-bs-target="#BranchesModal2">
									<span class="quickbook-placeholder" >@(SelectedBranch != null ? SelectedBranch.Name : "Select Branch")</span>
										<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="gray" class="bi bi-search" viewBox="0 0 16 16">
											<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
										</svg>
									</div>
								</div>

							</div>
						<div class="col-3">

							<div class="quick-book-control d-flex flex-column">
								<span class="quickbook-label">Film/Event @(MoviesInSelectedBranch != null ? $"(Showing {MoviesInSelectedBranch.Count()})" : "")</span>
								<div class="p-2 d-flex justify-content-between" style="border-bottom:1px solid lightgray;cursor:pointer;" data-bs-toggle="modal" data-bs-target="#MoviesModal">
									<span class="quickbook-placeholder">@(SelectedMovie != null ? SelectedMovie.Title : "Select Movie")</span>
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="gray" class="bi bi-search" viewBox="0 0 16 16">
										<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
									</svg>
								</div>
							</div>

						</div>
						<div class="col-3">

							<div class="quick-book-control d-flex flex-column">
								<span class="quickbook-label">Date</span>
								<div class="p-2 d-flex justify-content-between" style="border-bottom:1px solid lightgray;cursor:pointer;" data-bs-toggle="modal" data-bs-target="#DatesModal">
									<span class="quickbook-placeholder">@(SelectedDate != null ? SelectedDate.Value.ToString("MMMM dd") : "Select Date")</span>
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="gray" class="bi bi-search" viewBox="0 0 16 16">
										<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
									</svg>
								</div>
							</div>

						</div>
						<div class="col-3">

							<div class="quick-book-control d-flex flex-column">
								<span class="quickbook-label">Time</span>
								<div class="p-2 d-flex justify-content-between" style="border-bottom:1px solid lightgray;cursor:pointer;" data-bs-toggle="modal" data-bs-target="#TimesModal">
									<span class="quickbook-placeholder">@(SelectedSession != null ? SelectedSession.StartTime.ToString("h:mm tt") : "Select Time")</span>
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="gray" class="bi bi-search" viewBox="0 0 16 16">
										<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
									</svg>
								</div>
							</div>

						</div>
						</div>
					</div>

				@if(SelectedSession != null)
				{
					<button class="quickbook-search-btn" @onclick="@(()=>{LoadBookingPage(SelectedSession);})">Book</button>
				}
				else if(SelectedBranch != null)
				{
					// DayOfWeek = SelectedDate ?? DateTime.Now,
					// BranchId = SelectedBranch.Id,
					// MovieId = SelectedMovie != null ? SelectedMovie.Id : null
					<button class="quickbook-search-btn" @onclick="@(()=>{LoadBranchMoviesPage(SelectedDate ?? DateTime.Now,SelectedBranch.Id,SelectedBranch,SelectedMovie != null ? SelectedMovie.Id : null);})">Search</button>
				}
				else
				{
					<button class="quickbook-search-btn" disabled>Search</button>
				}
				

				</div>
			</div>
		</div>
	</div>


<!-- --------------------------- End Of Quick Book ----------------------------->





<!---------------------------------- Modals ---------------------------->




<!---------------------------------- Branches1 Modal ---------------------------->

<div class="modal gray-modal branches-modal fade" id="BranchesModal1" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content px-4 py-4">
			<h3 class="mb-4">Choose Cinemax Branch</h3>

			@if(Branches != null && Branches.Count() > 0)
			{
				<ul class="modal-list">
					@foreach(BranchDTO branch in Branches)
					{
						<li class="mb-3" data-bs-dismiss="modal" @onclick="@(()=>{LoadBranchMoviesPage(DateTime.Today,branch.Id,null,null);})">@branch.Name</li>
					}
				</ul>
			}
			else
			{
				<p class="modal-warning">No Branches to Display</p>
			}
		</div>
	</div>
</div>


<!---------------------------------- Branches2 Modal ---------------------------->

<div class="modal gray-modal branches-modal fade" id="BranchesModal2" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content px-4 py-4">
			<h3 class="mb-4">Choose Cinemax Branch</h3>

			@if (Branches != null && Branches.Count() > 0)
			{
				<ul class="modal-list">
					<li class=" modal-reset-btn" data-bs-dismiss="modal" @onclick="@(()=>{ResetBranch();})">Reset</li>
					@foreach (BranchDTO branch in Branches)
					{
						<li class="mb-3" data-bs-dismiss="modal" @onclick="@(()=>{SelectBranch(branch);})">@branch.Name</li>
					}
				</ul>
			}
			else
			{
				<p class="modal-warning">No Branches to Display</p>
			}


		</div>
	</div>
</div>



<!---------------------------------- Movies Modal ---------------------------->

<div class="modal gray-modal movies-modal fade" id="MoviesModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content px-4 py-4">
			<h3 class="mb-4">Choose Movie</h3>

			@if (MoviesInSelectedBranch == null)
			{
				<p class="modal-warning">No Branch Selected</p>
			}
			else if(MoviesInSelectedBranch.Count() == 0)
			{
				<p>No Movie To Display</p>
			}
			else
			{
				<ul class="modal-list">
					<li class="modal-reset-btn" data-bs-dismiss="modal" @onclick="@(()=>{ResetMovie();})">Reset</li>
					@foreach (MovieDTO movie in MoviesInSelectedBranch)
					{
						<li class="mb-3" data-bs-dismiss="modal" @onclick="@(()=>{SelectMovie(movie);})">@movie.Title</li>
					}
				</ul>
			}


		</div>
	</div>
</div>

<!---------------------------------- End Of Modal ---------------------------->



<!---------------------------------- Dates Modal ---------------------------->

<div class="modal gray-modal dates-modal fade" id="DatesModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" >
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content px-4 py-4">
			<h3 class="mb-4">Choose Date</h3>

			@if (DaysOfWeek == null)
			{
				<p class="modal-warning">Nothing to display</p>
			}
			else
			{
				<ul class="modal-list">
					<li class="modal-reset-btn" data-bs-dismiss="modal" @onclick="@(()=>{ResetDate();})">Reset</li>
					@foreach (DateTime date in DaysOfWeek)
					{
						<li class="mb-3" data-bs-dismiss="modal" @onclick="@(()=>{SelectDate(date);})">@(date.ToString("MMMM dd"))</li>
					}
				</ul>
			}


		</div>
	</div>
</div>

<!---------------------------------- End Of Dates Modal ---------------------------->


<!---------------------------------- Times Modal ---------------------------->




<div class="modal gray-modal times-modal fade" id="TimesModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content px-4 py-4">
			<h3 class="mb-4">Choose Time</h3>

			@if (MatchingSessions != null)
			{
				if(MatchingSessions.Count() == 0)
				{
					<p class="modal-warning">
						No Sessions found at <i class="modal-highlight">@SelectedBranch.Name</i> for movie <i class="modal-highlight">@SelectedMovie.Title</i> on
						<i class="modal-highlight">@SelectedDate.Value.ToString("MMMM dd")</i>
					</p>
				}
				else
				{
					<ul class="modal-list">
						<li class="modal-reset-btn" data-bs-dismiss="modal" @onclick="@(()=>{ResetTime();})">Reset</li>
						@foreach (SessionDTO session in MatchingSessions)
						{
							<li class="mb-3" data-bs-dismiss="modal" @onclick="@(()=>{SelectSession(session);})">@(session.StartTime.ToString("hh: mm tt"))</li>
						}
					</ul>
				}
				
			}
			else if(SelectedBranch == null)
			{
				<p class="modal-warning">Please Select a Branch</p>
			}
			else if (SelectedMovie == null)
			{
				<p class="modal-warning">Please Select a Movie</p>
			}
			else if (SelectedDate == null)
			{
				<p class="modal-warning">Please Select a Date</p>
			}


		</div>
	</div>
</div>

<!---------------------------------- End Of Times Modal ---------------------------->


<!-- Start of navbar -->
<nav class="navbar navbar-expand-lg bg-dark">
	<div class="container-fluid">
		<a class="navbar-brand text-warning" href="index.html" id="logo">CINEMAX</a>
		<button class="navbar-toggler"
				type="button"
				data-bs-toggle="collapse"
				data-bs-target="#navbarSupportedContent"
				aria-controls="navbarSupportedContent"
				aria-expanded="false"
				aria-label="Toggle navigation">
			<span class="navbar-toggler-icon"></span>
		</button>
		<div class="collapse navbar-collapse" id="navbarSupportedContent">
			<ul class="navbar-nav me-auto mb-2 mb-lg-0">
				<li class="nav-item">
					<a class="nav-link" aria-current="page" href="index.html">Home</a>
				</li>
				<li class="nav-item">
					<a class="nav-link" href="quiz.html">Play Game</a>
				</li>
			</ul>
		</div>
	</div>
</nav>

<!-- end of navbar -->


<!-- Start of the bootstrap carousel -->

<div id="carouselExample" class="carousel slide">
	<div class="carousel-inner">
		<!-- Carousel items go in here -->
		
		
		@if(ActiveMovies != null && ActiveMovies.Count() > 0)
		{
			
			@for(int i = 0; i < ActiveMovies.Count();i++)
			{
				<div class="@(i == 0 ? "carousel-item active" : "carousel-item")">
					<img src="@ActiveMovies[i].BackdropPath"
						  class="d-block w-100" style="height:70vh;"
						  alt="..." />
					<div class="carousel-footer">
						<h2>@ActiveMovies[i].Title</h2>
						<button class="book-btn" data-name="@ActiveMovies[i].Title">BOOK NOW</button>
					</div>;
				</div>
			}
		}
		else
		{
			<div class="carousel-item active">
				<div class="w-100 d-flex justify-content-center align-items-center" style="height:70vh;">
					<div class="d-flex justify-content-center">
						<div class="spinner-border" role="status">
							@* <span class="sr-only">Loading...</span> *@
						</div>
					</div>
				</div>
			</div>
		}


	</div>
	<button class="carousel-control-prev"
			type="button"
			data-bs-target="#carouselExample"
			data-bs-slide="prev">
		<span class="carousel-control-prev-icon" aria-hidden="true"></span>
		<span class="visually-hidden">Previous</span>
	</button>
	<button class="carousel-control-next"
			type="button"
			data-bs-target="#carouselExample"
			data-bs-slide="next">
		<span class="carousel-control-next-icon" aria-hidden="true"></span>
		<span class="visually-hidden">Next</span>
	</button>
</div>

<!-- end of the bootstrap carousel -->

@* ------------------------ Start of main container -------------------------- *@

<div class="container">


	<!-- Start of search bar -->

	<div class="container mt-5 mb-5">
		<div class="row">
			<div class="col-12 col-md-6">
				<h2 class="title">SEE WHAT'S ON AT</h2>
			</div>
			<div class="col-12 col-md-6">

				<div class="p-2 d-flex justify-content-between" style="border-bottom:1px solid lightgray;cursor:pointer;" data-bs-toggle="modal" data-bs-target="#BranchesModal1">
					<span style="color:lightgray;">@(Branch1 != null ? Branch1.Name : "Select Branch")</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-search" viewBox="0 0 16 16">
						<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
					</svg>
				</div>
				@* <button type="button" class="btn btn-outline-dark" @onclick="@(() => ShowMoviesInBranch())">Go</button> *@
				
			</div>
		</div>
	</div>

	<!-- end of search bar -->


	<div class="orange-line mb-5"></div>


	<div class="top-movies-container">
		<h3>Top Films</h3>

		<div class="container">
			<div class="row">

				@if(ActiveMovies != null && ActiveMovies.Count() > 0)
				{
					@for(int i = 0;i < Math.Min(ActiveMovies.Count(),12); i++)
					{
						<div class="col-2 mb-4">
							<div class="d-flex flex-column justify-content-center active-movie-container" @onclick="@(()=>{LoadBranchMoviesPage(DateTime.Today,Branch1.Id,null,ActiveMovies[i].Id);})">
								<img class="w-100 mb-3" style="height:auto;" src="@ActiveMovies[i].PosterPath">
								<span class="text-center movie-title">@ActiveMovies[i].Title</span>
							</div>
							
						</div>
					}

				}
				else
				{
					@for (int i = 0; i < 12; i++)
					{
						<div class="col-2 mb-4">
							<div class="d-flex flex-column justify-content-center active-movie-container">
								<div class="mb-3 skeleton image-skeleton"> </div>
								<div class="skeleton skeleton-text"></div>
								@* <span class="text-center movie-title">@ActiveMovies[i].Title</span> *@
							</div>
						</div>
					}
				}

			</div>
		</div>


	</div>




</div>

@* ------------------------ End of main container -------------------------- *@




<div class="footer">
	<p>&copy; All rights reserved.</p>
</div>

<!-- end of footer -->



@code {
	public bool ShowQuickBook = false;


	public List<BranchDTO> Branches = new List<BranchDTO>();
	public BranchDTO Branch1;

	public List<SessionDTO> Sessions = new List<SessionDTO>();
	public List<MovieDTO> ActiveMovies = new List<MovieDTO>();

	//Quick Book Properties
	public BranchDTO SelectedBranch { get; set; } = null;
	public MovieDTO SelectedMovie { get; set; } = null;
	public DateTime? SelectedDate { get; set; } = null;
	public SessionDTO SelectedSession { get; set; } = null;
	public List<DateTime> DaysOfWeek = new List<DateTime>();
	public List<SessionDTO> MatchingSessions = null;


	public List<MovieDTO> MoviesInSelectedBranch = null;

	//public List<MovieDTO> MoviesInSelectedBranch = new List<MovieDTO>();


	public SessionSelectionVM SessionSelect = new SessionSelectionVM();


	protected override async Task OnInitializedAsync()
	{
		//ShowQuickbookAfterSeconds(4);
		DaysOfWeek = GetNext20Days();
		Branches = await branchesService.GetJustBranches();
		if (Branches != null && Branches.Count() > 0) Branch1 = Branches[0];
		ActiveMovies = await moviesService.GetAllActiveMovies();
		ShowQuickbookNow();
	}


	public async Task ShowQuickbookAfterSeconds(int seconds)
	{
		await Task.Delay(seconds * 1000);

		ShowQuickBook = true;
		StateHasChanged();
	}


	public void ShowQuickbookNow()
	{
		ShowQuickBook = true;
		StateHasChanged();
	}


	public void ResetBranch()
	{
		SelectedBranch = null;
		SelectedMovie = null;
		SelectedDate = null;
		SelectedSession = null;
		MatchingSessions = null;

	}

	public void ResetMovie()
	{
		SelectedMovie = null;
		SelectedDate = null;
		SelectedSession = null;
		MatchingSessions = null;
	}

	public void ResetDate()
	{
		SelectedDate = null;
		SelectedSession = null;
		MatchingSessions = null;
	}

	public void ResetTime()
	{
		SelectedSession = null;
	}

	public List<DateTime> GetNext20Days()
	{
		List<DateTime> days = new List<DateTime>();
		DateTime today = DateTime.Now;
		days.Add(today);

		for(int i = 0;i < 19;i++)
		{
			DateTime day = today.AddDays(i + 1);
			days.Add(day);
		}

		return days;
	}

	public List<MovieDTO> GetAllMoviesInBranch(BranchDTO branch)
	{
		List<MovieDTO> movies = new List<MovieDTO>();

		foreach(VenueDTO venue in branch.Venues)
		{
			if (venue.Sessions != null)
			{
				foreach (SessionDTO session in venue.Sessions)
				{
					movies.Add(session.Movie);
				}
			}
		}

		return movies.DistinctBy(m => m.Id).ToList();
	}



	public async Task SelectBranch(BranchDTO branch)
	{
		SelectedBranch = await branchesService.GetFullBranchById(branch.Id);

		ResetMovie();

		MoviesInSelectedBranch = GetAllMoviesInBranch(SelectedBranch);
		StateHasChanged();
	}


	public async Task SelectMovie(MovieDTO movie)
	{
		SelectedMovie = movie;
		ResetDate();
	}

	public List<SessionDTO> GetMatchingSessions(List<SessionDTO> sessions)
	{
		sessions = sessions.Where(s => s.MovieId == SelectedMovie.Id).ToList();

		sessions = sessions.Where(s => utilityService.IsSameDay(s.StartTime, SelectedDate.Value)).ToList();

		sessions = sessions.Where(s => s.StartTime > DateTime.Now).ToList();

		sessions = sessions.OrderBy(s => s.StartTime).ToList();

		return sessions;
	}



	public async Task SelectDate(DateTime date)
	{
		SelectedDate = date;

		ResetTime();

		// --------------- Left Off -----------------------

		List<SessionDTO> sessions = ExtractAllSessionsFromBranch(SelectedBranch);

		MatchingSessions = GetMatchingSessions(sessions);


	}

	public async Task SelectSession(SessionDTO session)
	{
		SelectedSession = session;

	}

	public List<SessionDTO> ExtractAllSessionsFromBranch(BranchDTO branch)
	{
		List<SessionDTO> sessions = new List<SessionDTO>();

		foreach (VenueDTO venue in branch.Venues)
		{
			if (venue.Sessions != null) sessions.AddRange(venue.Sessions);
		}

		return sessions;
	}

	public void ShowMoviesInBranch()
	{
		if (Branch1 == null) return;

		navManager.NavigateTo($"/branchMovies/{Branch1.Id}");
	}


	public void LoadBookingPage(SessionDTO session)
	{
		navManager.NavigateTo($"/Booking/{session.Id}");
	}


	public async Task LoadBranchMoviesPage(DateTime dayOfWeek,int branchId,BranchDTO branch, int? movieId)
	{
		DateAndBranchIdDTO data = new DateAndBranchIdDTO()
			{
				DayOfWeek = dayOfWeek,
				BranchId = branchId,
				MovieId = movieId
				// DayOfWeek = SelectedDate ?? DateTime.Now,
				// BranchId = SelectedBranch.Id,
				// MovieId = SelectedMovie != null ? SelectedMovie.Id : null
			};
		stateContainer.ObjectTunnel.Add(data.GetHashCode(),data);

		branchesService.FullBranch = branch;
		navManager.NavigateTo($"/branchMovies/{data.GetHashCode()}");
	}


	// public async Task LoadBranch(int branchId)
	// {
	// 	DateAndBranchIdDTO data = new DateAndBranchIdDTO()
	// 		{
	// 			DayOfWeek = DateTime.Now,
	// 			BranchId = branchId,
	// 			MovieId = null
	// 		};

	// 	stateContainer.ObjectTunnel.Add(data.GetHashCode(), data);

	// 	branchesService.FullBranch = await branchesService.GetFullBranchById(branchId);
	// 	navManager.NavigateTo($"/branchMovies/{data.GetHashCode()}");


	// 	//navManager.NavigateTo($"/branchMovies/{branchId}");
	// 	// Branch1 = Branches.Find(b => b.Id == branchId);
	// }


	// public VenueDTO GetVenueById(int venueId)
	// {
	// 	return Branch.Venues.FirstOrDefault(v => v.Id == venueId);
	// }

	// public void ExtractAllSessionsFromBranch()
	// {
	// 	foreach(VenueDTO venue in Branch.Venues)
	// 	{
	// 		if (venue.Sessions != null) Sessions.AddRange(venue.Sessions);
	// 	}
	// }


	

	



	
	// public void AddBranchAndVenueToSessions()
	// {
	// 	foreach(SessionDTO session in Sessions)
	// 	{
	// 		session.Venue = GetVenueById(session.VenueId);
	// 		session.Venue.Branch = Branch;
	// 	}
	// }



	public List<SessionDTO> FilterSessionsByDate(DateTime dt, List<SessionDTO> sessions)
	{
		return sessions.Where(s => utilityService.IsSameDay(dt, s.StartTime)).ToList();
	}


	public List<SessionDTO> GetSessionsByMovie(int movieId)
	{
		return Sessions.Where(s => s.Movie.Id == movieId).ToList();
	}


	public async Task UpdateBranch(int branchId)
	{
		Branch1 = await branchesService.GetFullBranchById(branchId);


		//ExtractAllSessionsFromBranch();

		//AddBranchAndVenueToSessions();

		
	}



}
